{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import * as babel from '@babel/core';\nimport solid from 'babel-preset-solid';\nimport { readFileSync } from 'fs';\nimport { mergeAndConcat } from 'merge-anything';\nimport { createRequire } from 'module';\nimport solidRefresh from 'solid-refresh/babel';\nimport { createFilter, version } from 'vite';\nimport type { Alias, AliasOptions, Plugin, FilterPattern } from 'vite';\nimport { crawlFrameworkPkgs } from 'vitefu';\n\nconst require = createRequire(import.meta.url);\n\nconst runtimePublicPath = '/@solid-refresh';\nconst runtimeFilePath = require.resolve('solid-refresh/dist/solid-refresh.mjs');\nconst runtimeCode = readFileSync(runtimeFilePath, 'utf-8');\n\nconst isVite6 = version.startsWith('6.');\n\n/** Possible options for the extensions property */\nexport interface ExtensionOptions {\n  typescript?: boolean;\n}\n\n/** Configuration options for vite-plugin-solid. */\nexport interface Options {\n  /**\n   * A [picomatch](https://github.com/micromatch/picomatch) pattern, or array of patterns, which specifies the files\n   * the plugin should operate on.\n   */\n  include?: FilterPattern;\n  /**\n   * A [picomatch](https://github.com/micromatch/picomatch) pattern, or array of patterns, which specifies the files\n   * to be ignored by the plugin.\n   */\n  exclude?: FilterPattern;\n  /**\n   * This will inject solid-js/dev in place of solid-js in dev mode. Has no\n   * effect in prod. If set to `false`, it won't inject it in dev. This is\n   * useful for extra logs and debugging.\n   *\n   * @default true\n   */\n  dev?: boolean;\n  /**\n   * This will force SSR code in the produced files.\n   *\n   * @default false\n   */\n  ssr?: boolean;\n\n  /**\n   * This will inject HMR runtime in dev mode. Has no effect in prod. If\n   * set to `false`, it won't inject the runtime in dev.\n   *\n   * @default true\n   */\n  hot?: boolean;\n  /**\n   * This registers additional extensions that should be processed by\n   * vite-plugin-solid.\n   *\n   * @default undefined\n   */\n  extensions?: (string | [string, ExtensionOptions])[];\n  /**\n   * Pass any additional babel transform options. They will be merged with\n   * the transformations required by Solid.\n   *\n   * @default {}\n   */\n  babel?:\n    | babel.TransformOptions\n    | ((source: string, id: string, ssr: boolean) => babel.TransformOptions)\n    | ((source: string, id: string, ssr: boolean) => Promise<babel.TransformOptions>);\n  /**\n   * Pass any additional [babel-plugin-jsx-dom-expressions](https://github.com/ryansolid/dom-expressions/tree/main/packages/babel-plugin-jsx-dom-expressions#plugin-options).\n   * They will be merged with the defaults sets by [babel-preset-solid](https://github.com/solidjs/solid/blob/main/packages/babel-preset-solid/index.js#L8-L25).\n   *\n   * @default {}\n   */\n  solid?: {\n    /**\n     * Removed unnecessary closing tags from template strings. More info here:\n     * https://github.com/solidjs/solid/blob/main/CHANGELOG.md#smaller-templates\n     *\n     * @default false\n     */\n    omitNestedClosingTags?: boolean;\n\n    /**\n     * The name of the runtime module to import the methods from.\n     *\n     * @default \"solid-js/web\"\n     */\n    moduleName?: string;\n\n    /**\n     * The output mode of the compiler.\n     * Can be:\n     * - \"dom\" is standard output\n     * - \"ssr\" is for server side rendering of strings.\n     * - \"universal\" is for using custom renderers from solid-js/universal\n     *\n     * @default \"dom\"\n     */\n    generate?: 'ssr' | 'dom' | 'universal';\n\n    /**\n     * Indicate whether the output should contain hydratable markers.\n     *\n     * @default false\n     */\n    hydratable?: boolean;\n\n    /**\n     * Boolean to indicate whether to enable automatic event delegation on camelCase.\n     *\n     * @default true\n     */\n    delegateEvents?: boolean;\n\n    /**\n     * Boolean indicates whether smart conditional detection should be used.\n     * This optimizes simple boolean expressions and ternaries in JSX.\n     *\n     * @default true\n     */\n    wrapConditionals?: boolean;\n\n    /**\n     * Boolean indicates whether to set current render context on Custom Elements and slots.\n     * Useful for seemless Context API with Web Components.\n     *\n     * @default true\n     */\n    contextToCustomElements?: boolean;\n\n    /**\n     * Array of Component exports from module, that aren't included by default with the library.\n     * This plugin will automatically import them if it comes across them in the JSX.\n     *\n     * @default [\"For\",\"Show\",\"Switch\",\"Match\",\"Suspense\",\"SuspenseList\",\"Portal\",\"Index\",\"Dynamic\",\"ErrorBoundary\"]\n     */\n    builtIns?: string[];\n  };\n}\n\nfunction getExtension(filename: string): string {\n  const index = filename.lastIndexOf('.');\n  return index < 0 ? '' : filename.substring(index).replace(/\\?.+$/, '');\n}\nfunction containsSolidField(fields: Record<string, any>) {\n  const keys = Object.keys(fields);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (key === 'solid') return true;\n    if (typeof fields[key] === 'object' && fields[key] != null && containsSolidField(fields[key]))\n      return true;\n  }\n  return false;\n}\n\nfunction getJestDomExport(setupFiles: string[]) {\n  return setupFiles?.some((path) => /jest-dom/.test(path))\n    ? undefined\n    : ['@testing-library/jest-dom/vitest', '@testing-library/jest-dom/extend-expect'].find(\n        (path) => {\n          try {\n            require.resolve(path);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        },\n      );\n}\n\nexport default function solidPlugin(options: Partial<Options> = {}): Plugin {\n  const filter = createFilter(options.include, options.exclude);\n\n  let needHmr = false;\n  let replaceDev = false;\n  let projectRoot = process.cwd();\n\n  return {\n    name: 'solid',\n    enforce: 'pre',\n\n    async config(userConfig, { command }) {\n      // We inject the dev mode only if the user explicitely wants it or if we are in dev (serve) mode\n      replaceDev = options.dev === true || (options.dev !== false && command === 'serve');\n      projectRoot = userConfig.root;\n\n      if (!userConfig.resolve) userConfig.resolve = {};\n      userConfig.resolve.alias = normalizeAliases(userConfig.resolve && userConfig.resolve.alias);\n\n      const solidPkgsConfig = await crawlFrameworkPkgs({\n        viteUserConfig: userConfig,\n        root: projectRoot || process.cwd(),\n        isBuild: command === 'build',\n        isFrameworkPkgByJson(pkgJson) {\n          return containsSolidField(pkgJson.exports || {});\n        },\n      });\n\n      // fix for bundling dev in production\n      const nestedDeps = replaceDev\n        ? ['solid-js', 'solid-js/web', 'solid-js/store', 'solid-js/html', 'solid-js/h']\n        : [];\n\n      const test = (userConfig as any).test || {};\n\n      if (userConfig.mode === 'test') {\n        // to simplify the processing of the config, we normalize the setupFiles to an array\n        const userSetupFiles: string[] =\n          typeof test.setupFiles === 'string' ? [test.setupFiles] : test.setupFiles || [];\n\n        if (!test.environment && !options.ssr) {\n          test.environment = 'jsdom';\n        }\n\n        test.server = test.server || {};\n        test.server.deps = test.server.deps || {};\n        if (!test.server.deps.external?.find((item: string | RegExp) => /solid-js/.test(item.toString()))) {\n          test.server.deps.external = [...(test.server.deps.external || []), /solid-js/];\n        }\n\n        const jestDomImport = getJestDomExport(userSetupFiles);\n        if (jestDomImport) {\n          test.setupFiles = [...userSetupFiles, jestDomImport];\n        }\n      }\n\n      return {\n        /**\n         * We only need esbuild on .ts or .js files.\n         * .tsx & .jsx files are handled by us\n         */\n        // esbuild: { include: /\\.ts$/ },\n        resolve: {\n          conditions: isVite6\n            ? undefined\n            : [\n                'solid',\n                ...(replaceDev ? ['development'] : []),\n                ...(userConfig.mode === 'test' && !options.ssr ? ['browser'] : []),\n              ],\n          dedupe: nestedDeps,\n          alias: [{ find: /^solid-refresh$/, replacement: runtimePublicPath }],\n        },\n        optimizeDeps: {\n          include: [...nestedDeps, ...solidPkgsConfig.optimizeDeps.include],\n          exclude: solidPkgsConfig.optimizeDeps.exclude,\n        },\n        ssr: solidPkgsConfig.ssr,\n        ...(test.server ? { test } : {}),\n      };\n    },\n\n    // @ts-ignore This hook only works in Vite 6\n    async configEnvironment(name, config, opts) {\n      config.resolve ??= {};\n      // Emulate Vite default fallback for `resolve.conditions` if not set\n      if (config.resolve.conditions == null) {\n        // @ts-ignore These exports only exist in Vite 6\n        const { defaultClientConditions, defaultServerConditions } = await import('vite');\n        if (config.consumer === 'client' || name === 'client' || opts.isSsrTargetWebworker) {\n          config.resolve.conditions = [...defaultClientConditions];\n        } else {\n          config.resolve.conditions = [...defaultServerConditions];\n        }\n      }\n      config.resolve.conditions.push('solid');\n    },\n\n    configResolved(config) {\n      needHmr = config.command === 'serve' && config.mode !== 'production' && options.hot !== false;\n    },\n\n    resolveId(id) {\n      if (id === runtimePublicPath) return id;\n    },\n\n    load(id) {\n      if (id === runtimePublicPath) return runtimeCode;\n    },\n\n    async transform(source, id, transformOptions) {\n      const isSsr = transformOptions && transformOptions.ssr;\n      const currentFileExtension = getExtension(id);\n\n      const extensionsToWatch = options.extensions || [];\n      const allExtensions = extensionsToWatch.map((extension) =>\n        // An extension can be a string or a tuple [extension, options]\n        typeof extension === 'string' ? extension : extension[0],\n      );\n\n      if (!filter(id) || !(/\\.[mc]?[tj]sx$/i.test(id) || allExtensions.includes(currentFileExtension))) {\n        return null;\n      }\n\n      const inNodeModules = /node_modules/.test(id);\n\n      let solidOptions: { generate: 'ssr' | 'dom'; hydratable: boolean };\n\n      if (options.ssr) {\n        if (isSsr) {\n          solidOptions = { generate: 'ssr', hydratable: true };\n        } else {\n          solidOptions = { generate: 'dom', hydratable: true };\n        }\n      } else {\n        solidOptions = { generate: 'dom', hydratable: false };\n      }\n\n      id = id.replace(/\\?.+$/, '');\n\n      // We need to know if the current file extension has a typescript options tied to it\n      const shouldBeProcessedWithTypescript = /\\.[mc]?tsx$/i.test(id) || extensionsToWatch.some((extension) => {\n        if (typeof extension === 'string') {\n          return extension.includes('tsx');\n        }\n\n        const [extensionName, extensionOptions] = extension;\n        if (extensionName !== currentFileExtension) return false;\n\n        return extensionOptions.typescript;\n      });\n      const plugins: NonNullable<NonNullable<babel.TransformOptions['parserOpts']>['plugins']> = ['jsx']\n\n      if (shouldBeProcessedWithTypescript) {\n        plugins.push('typescript');\n      }\n\n      const opts: babel.TransformOptions = {\n        root: projectRoot,\n        filename: id,\n        sourceFileName: id,\n        presets: [[solid, { ...solidOptions, ...(options.solid || {}) }]],\n        plugins: needHmr && !isSsr && !inNodeModules ? [[solidRefresh, { bundler: 'vite' }]] : [],\n        ast: false,\n        sourceMaps: true,\n        configFile: false,\n        babelrc: false,\n        parserOpts: {\n          plugins,\n        },\n      };\n\n      // Default value for babel user options\n      let babelUserOptions: babel.TransformOptions = {};\n\n      if (options.babel) {\n        if (typeof options.babel === 'function') {\n          const babelOptions = options.babel(source, id, isSsr);\n          babelUserOptions = babelOptions instanceof Promise ? await babelOptions : babelOptions;\n        } else {\n          babelUserOptions = options.babel;\n        }\n      }\n\n      const babelOptions = mergeAndConcat(babelUserOptions, opts) as babel.TransformOptions;\n\n      const { code, map } = await babel.transformAsync(source, babelOptions);\n\n      return { code, map };\n    },\n  };\n}\n\n/**\n * This basically normalize all aliases of the config into\n * the array format of the alias.\n *\n * eg: alias: { '@': 'src/' } => [{ find: '@', replacement: 'src/' }]\n */\nfunction normalizeAliases(alias: AliasOptions = []): Alias[] {\n  return Array.isArray(alias)\n    ? alias\n    : Object.entries(alias).map(([find, replacement]) => ({ find, replacement }));\n}\n"],"names":["require","createRequire","import","meta","url","runtimePublicPath","runtimeFilePath","resolve","runtimeCode","readFileSync","isVite6","version","startsWith","getExtension","filename","index","lastIndexOf","substring","replace","containsSolidField","fields","keys","Object","i","length","key","getJestDomExport","setupFiles","some","path","test","undefined","find","e","solidPlugin","options","filter","createFilter","include","exclude","needHmr","replaceDev","projectRoot","process","cwd","name","enforce","config","userConfig","command","dev","root","alias","normalizeAliases","solidPkgsConfig","crawlFrameworkPkgs","viteUserConfig","isBuild","isFrameworkPkgByJson","pkgJson","exports","nestedDeps","mode","userSetupFiles","environment","ssr","server","deps","external","item","toString","jestDomImport","conditions","dedupe","replacement","optimizeDeps","configEnvironment","opts","defaultClientConditions","defaultServerConditions","consumer","isSsrTargetWebworker","push","configResolved","hot","resolveId","id","load","transform","source","transformOptions","isSsr","currentFileExtension","extensionsToWatch","extensions","allExtensions","map","extension","includes","inNodeModules","solidOptions","generate","hydratable","shouldBeProcessedWithTypescript","extensionName","extensionOptions","typescript","plugins","sourceFileName","presets","solid","solidRefresh","bundler","ast","sourceMaps","configFile","babelrc","parserOpts","babelUserOptions","babel","babelOptions","Promise","mergeAndConcat","code","transformAsync","Array","isArray","entries"],"mappings":"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"}